<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mutedcritics.userstat.dao.UserTierStatsDAO">

    <select id="getTierStatistics" parameterType="com.mutedcritics.dto.TierStatsRequestDTO" resultType="com.mutedcritics.dto.TierStatDTO">
        SELECT
            t.tier_name AS tierName,
            COUNT(DISTINCT t.user_id) AS userCount
        FROM
            tier t
        JOIN
            season s ON t.season_idx = s.season_idx
        JOIN
            user u ON t.user_id = u.user_id

        <if test="heroId != null">
            JOIN (
                SELECT
                    user_id, heroes_idx
                FROM (
                    SELECT
                        mr.user_id,
                        mr.heroes_idx,
                        ROW_NUMBER() OVER (PARTITION BY mr.user_id ORDER BY COUNT(mr.heroes_idx) DESC) AS rn
                    FROM
                        match_result mr
                    JOIN
                        match_table m ON mr.match_idx = m.match_idx
                    WHERE
                        m.match_date BETWEEN (SELECT start_date FROM season WHERE season_idx = #{seasonIdx})
                                     AND (SELECT end_date FROM season WHERE season_idx = #{seasonIdx})
                    GROUP BY
                        mr.user_id, mr.heroes_idx
                ) AS PlayCounts
                WHERE rn = 1
            ) AS main_hero ON u.user_id = main_hero.user_id
        </if>

        WHERE
            t.season_idx = #{seasonIdx}
        <if test="gender != null and gender != ''">
            AND u.user_gender = #{gender}
        </if>
        <if test="region != null and region != ''">
            AND u.region = #{region}
        </if>
        <if test="vip != null and vip == true">
            AND u.vip_yn = true
        </if>
        <if test="heroId != null">
            AND main_hero.heroes_idx = #{heroId}
        </if>
        GROUP BY
            t.tier_name
        ORDER BY
            FIELD(t.tier_name, '언랭크드', '브론즈', '실버', '골드', '플래티넘', '다이아몬드', '마스터', '그랜드마스터', '챌린저');
    </select>

    <select id="getUsersByClassification" parameterType="com.mutedcritics.dto.TierStatsRequestDTO" resultType="com.mutedcritics.dto.UserClassificationDTO">
        SELECT
            u.user_id AS userId,
            t.tier_name AS tierName,
            u.user_gender AS userGender,
            u.region,
            (
                SELECT SUM(mr.match_play_time)
                FROM match_result mr
                WHERE mr.user_id = u.user_id
            ) AS totalPlayTime,
            (
                SELECT SUM(il.item_price)
                FROM order_list ol
                JOIN item_list il ON ol.item_idx = il.item_idx
                WHERE ol.user_id = u.user_id
            ) AS totalPayment,
            (
                SELECT h.heroes_name
                FROM match_result mr
                JOIN heroes h ON mr.heroes_idx = h.heroes_idx
                JOIN match_table m ON mr.match_idx = m.match_idx
                WHERE mr.user_id = u.user_id
                    AND m.match_date BETWEEN (SELECT start_date FROM season WHERE season_idx = #{seasonIdx})
                                         AND (SELECT end_date FROM season WHERE season_idx = #{seasonIdx})
                GROUP BY h.heroes_name
                ORDER BY COUNT(mr.heroes_idx) DESC, MAX(m.match_date) DESC
                LIMIT 1
            ) AS mainHero
        FROM
            user u
        JOIN
            tier t ON u.user_id = t.user_id
        <if test="heroId != null">
            JOIN (
                SELECT
                    user_id, heroes_idx
                FROM (
                    SELECT
                        mr.user_id,
                        mr.heroes_idx,
                        ROW_NUMBER() OVER (PARTITION BY mr.user_id ORDER BY COUNT(mr.heroes_idx) DESC) AS rn
                    FROM
                        match_result mr
                    JOIN
                        match_table m ON mr.match_idx = m.match_idx
                    WHERE
                        m.match_date BETWEEN (SELECT start_date FROM season WHERE season_idx = #{seasonIdx})
                                     AND (SELECT end_date FROM season WHERE season_idx = #{seasonIdx})
                    GROUP BY
                        mr.user_id, mr.heroes_idx
                ) AS PlayCounts
                WHERE rn = 1
            ) AS main_hero ON u.user_id = main_hero.user_id
        </if>
        WHERE
            t.season_idx = #{seasonIdx}
        <if test="tierName != null and tierName != ''">
            AND t.tier_name = #{tierName}
        </if>
        <if test="gender != null and gender != ''">
            AND u.user_gender = #{gender}
        </if>
        <if test="region != null and region != ''">
            AND u.region = #{region}
        </if>
        <if test="vip != null and vip == true">
            AND u.vip_yn = b'1'
        </if>
        <if test="heroId != null">
            AND main_hero.heroes_idx = #{heroId}
        </if>
        ORDER BY u.user_id
        LIMIT #{size}
        OFFSET #{offset}
    </select>

    <select id="getUsersByClassificationCount" parameterType="com.mutedcritics.dto.TierStatsRequestDTO" resultType="int">
        SELECT COUNT(*)
        FROM
            user u
        JOIN
            tier t ON u.user_id = t.user_id
        <if test="heroId != null">
            JOIN (
                SELECT
                    user_id, heroes_idx
                FROM (
                    SELECT
                        mr.user_id,
                        mr.heroes_idx,
                        ROW_NUMBER() OVER (PARTITION BY mr.user_id ORDER BY COUNT(mr.heroes_idx) DESC) AS rn
                    FROM
                        match_result mr
                    JOIN
                        match_table m ON mr.match_idx = m.match_idx
                    WHERE
                        m.match_date BETWEEN (SELECT start_date FROM season WHERE season_idx = #{seasonIdx})
                                         AND (SELECT end_date FROM season WHERE season_idx = #{seasonIdx})
                    GROUP BY
                        mr.user_id, mr.heroes_idx
                ) AS PlayCounts
                WHERE rn = 1
            ) AS main_hero ON u.user_id = main_hero.user_id
        </if>
        WHERE
            t.season_idx = #{seasonIdx}
        <if test="tierName != null and tierName != ''">
            AND t.tier_name = #{tierName}
        </if>
        <if test="gender != null and gender != ''">
            AND u.user_gender = #{gender}
        </if>
        <if test="region != null and region != ''">
            AND u.region = #{region}
        </if>
        <if test="vip != null and vip == true">
            AND u.vip_yn = b'1'
        </if>
        <if test="heroId != null">
            AND main_hero.heroes_idx = #{heroId}
        </if>
    </select>



    <select id="getSeasonTierStats" parameterType="int" resultType="com.mutedcritics.dto.SeasonTierStatsDTO">
        SELECT
            s.season_idx AS seasonIdx,
            t.tier_name AS tierName,
            COUNT(DISTINCT t.user_id) AS userCount
        FROM
            tier t
        JOIN
            season s ON t.season_idx = s.season_idx
        JOIN
            user u ON u.user_id = t.user_id
        <if test="seasonIdx != null">
        WHERE
            t.season_idx = #{seasonIdx}
        </if>
        GROUP BY
            s.season_idx, t.tier_name
        ORDER BY
            s.season_idx ASC,
            FIELD(t.tier_name, '언랭크드', '브론즈', '실버', '골드', '플래티넘', '다이아몬드', '마스터', '그랜드마스터', '챌린저');
    </select>

    <select id="getUserCategory" parameterType="com.mutedcritics.dto.UserCategoryRequestDTO">
        SELECT
            u.user_id AS userId,
            u.user_type AS userType,
            u.user_gender AS userGender,
            u.region,
            (SELECT COALESCE(SUM(mr.match_play_time),0)
                FROM match_result mr
                WHERE mr.user_id = u.user_id) AS totalPlayTime,
            (SELECT COALESCE(SUM(
                             CASE ol.item_cate
                             WHEN 'item' THEN il.item_price
                             WHEN 'bundle' THEN bi.bundle_price
                             ELSE 0
                        END
        ),0)
            FROM order_list ol
            LEFT JOIN item_list il ON ol.item_idx = il.item_idx AND ol.item_cate = 'item'
            LEFT JOIN bundle_item bi ON ol.item_idx = bi.bundle_idx AND ol.item_cate = 'bundle'
            WHERE ol.user_id = u.user_id AND ol.order_date &lt;= CURDATE()) AS totalPayment
        FROM user u
        <where>
            u.join_date &lt;= CURDATE()
            <if test="category != null and category != ''">
                <choose>
                    <when test="category == '신규'">
                        AND u.user_type = '신규'
                    </when>
                    <when test="category == '복귀'">
                        AND u.user_type = '복귀'
                    </when>
                    <when test="category == '일반'">
                        AND u.user_type = '일반'
                    </when>
                    <when test="category == '휴면'">
                        AND u.user_type = '휴면'
                    </when>
                    <when test="category == '정지'">
                        AND u.user_type = '정지'
                    </when>
                    <when test="category == '탈퇴'">
                        AND u.user_type = '탈퇴'
                    </when>
                    <when test="category == '이탈 위험군'">
                        AND u.user_type = '이탈 위험군'
                    </when>
                    <when test="category == 'vip'">
                        AND u.vip_yn = true
                    </when>
                    <when test="category == 'receive_yes'">
                        AND u.receive_yn = true
                    </when>
                    <when test="category == 'receive_no'">
                        AND u.receive_yn = false
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY u.join_date DESC
        LIMIT #{size}
        OFFSET #{offset}
    </select>

    <select id="getUserCategoryCount" parameterType="com.mutedcritics.dto.UserCategoryRequestDTO" resultType="int">
        SELECT COUNT(*)
        FROM user u
        <where>
            u.join_date &lt;= NOW()
            <if test="category != null and category != ''">
                <choose>
                    <when test="category == '신규'">
                        AND u.user_type = '신규'
                    </when>
                    <when test="category == '복귀'">
                        AND u.user_type = '복귀'
                    </when>
                    <when test="category == '일반'">
                        AND u.user_type = '일반'
                    </when>
                    <when test="category == '휴면'">
                        AND u.user_type = '휴면'
                    </when>
                    <when test="category == '정지'">
                        AND u.user_type = '정지'
                    </when>
                    <when test="category == '탈퇴'">
                        AND u.user_type = '탈퇴'
                    </when>
                    <when test="category == '이탈 위험군'">
                        AND u.user_type = '이탈 위험군'
                    </when>
                    <when test="category == 'vip'">
                        AND u.vip_yn = true
                    </when>
                    <when test="category == 'receive_yes'">
                        AND u.receive_yn = true
                    </when>
                    <when test="category == 'receive_no'">
                        AND u.receive_yn = false
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="getUserCategoryStats" resultType="map">
        SELECT '신규' AS category, COUNT(*) AS count FROM user WHERE user_type = '신규' AND join_date &lt; NOW()
        UNION ALL
        SELECT '복귀' AS category, COUNT(*) AS count FROM user WHERE user_type = '복귀' AND join_date &lt; NOW()
        UNION ALL
        SELECT '일반' AS category, COUNT(*) AS count FROM user WHERE user_type = '일반' AND join_date &lt; NOW()
        UNION ALL
        SELECT 'VIP' AS category, COUNT(*) AS count FROM user WHERE vip_yn = true AND join_date &lt; NOW()
        UNION ALL
        SELECT '수신동의' AS category, COUNT(*) AS count FROM user WHERE receive_yn = true AND join_date &lt; NOW()
        UNION ALL
        SELECT '수신거부' AS category, COUNT(*) AS count FROM user WHERE receive_yn = false AND join_date &lt; NOW()
        UNION ALL
        SELECT '휴면' AS category, COUNT(*) AS count FROM user WHERE user_type = '휴면' AND join_date &lt; NOW()
        UNION ALL
        SELECT '정지' AS category, COUNT(*) AS count FROM user WHERE user_type = '정지' AND join_date &lt; NOW()
        UNION ALL
        SELECT '탈퇴' AS category, COUNT(*) AS count FROM user WHERE user_type = '탈퇴' AND join_date &lt; NOW()
        UNION ALL
        SELECT '이탈 위험군' AS category, COUNT(*) AS count FROM user WHERE user_type = '이탈 위험군' AND join_date &lt; NOW()
    </select>


    <!-- 영웅 정보 -->
    <select id="getHeroData" resultType="map">
        SELECT heroes_idx, heroes_name FROM heroes
    </select>


</mapper>