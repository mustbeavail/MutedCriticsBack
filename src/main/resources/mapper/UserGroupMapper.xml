<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mutedcritics.user.dao.UserGroupDAO">
    <!-- 0) VIP 플래그 초기화 -->
    <update id="resetVipFlags">
        UPDATE user SET vip_yn = b'0';
    </update>

    <!-- 0.1) 조건 충족자만 vip_yn = 1 -->
    <update id="setVipFlags">
        UPDATE user u
        JOIN (
        SELECT  ss.user_id
        FROM (
        SELECT  o.user_id,
        s.season_idx,
        SUM(il.item_price) AS season_spent
        FROM   season s
        JOIN   order_list o ON o.order_date BETWEEN s.start_date AND s.end_date
        JOIN   item_list  il ON il.item_idx = o.item_idx
        WHERE  s.start_date >= DATE_SUB(#{baseDate}, INTERVAL 6 MONTH)
        AND  s.start_date &lt; #{baseDate}
        GROUP BY o.user_id, s.season_idx
        HAVING  season_spent >= 300000
        ) ss
        GROUP BY ss.user_id
        HAVING  COUNT(*) >= 3
        ) vip  ON vip.user_id = u.user_id
        SET u.vip_yn = b'1';
    </update>

    <!-- 1) 탈퇴 -->
    <update id="updateWithdrawnUsers">
        UPDATE user
        SET user_type = '탈퇴'
        WHERE withdraw_date IS NOT NULL;
    </update>

    <!-- 2) 휴면 (최근 6개월 미접속) -->
    <update id="updateDormantUsers">
        UPDATE user u
        LEFT JOIN (SELECT user_id, MAX(access_time) AS last_access
        FROM access_stats GROUP BY user_id) la
        ON la.user_id = u.user_id
        SET u.user_type   = '휴면',
        u.dormant_date = #{baseDate}
        WHERE u.user_type NOT IN('탈퇴', '휴면')
        AND (
        la.last_access &lt; DATE_SUB(#{baseDate}, INTERVAL 6 MONTH)
        OR (la.last_access IS NULL
        AND u.join_date &lt; DATE_SUB(#{baseDate}, INTERVAL 6 MONTH))
        );
    </update>

    <!-- 3) 휴면 → 접속하면 즉시 복귀 -->
    <update id="updateReturningUsers">
        UPDATE user u
            JOIN (SELECT user_id, MAX(access_time) AS last_access
            FROM access_stats
            GROUP BY user_id) la
        ON la.user_id = u.user_id
            SET u.user_type      = '복귀',
                u.returning_date = #{baseDate},
                u.dormant_date   = NULL
        WHERE u.user_type = '휴면'
            /* ‘휴면 처리된 날짜(dormant_date)’ 이후에 실제 접속이 있었는가? */
          AND la.last_access >= u.dormant_date;
    </update>

    <!-- 3.1) 복귀 상태가 2개월 지나면 일반으로 전환 -->
    <update id="updateReturningToNormal">
        UPDATE user
        SET user_type = '일반', returning_date = NULL
        WHERE user_type = '복귀'
        AND returning_date &lt; DATE_SUB(#{baseDate}, INTERVAL 2 MONTH);
    </update>

    <!-- 4) 신규 (가입 ≤ 2개월) -->
    <update id="updateNewUsers">
        UPDATE user
        SET user_type = '신규'
        WHERE user_type NOT IN ('탈퇴','휴면','복귀')
          AND join_date >= DATE_SUB(#{baseDate}, INTERVAL 2 MONTH);
    </update>

    <!-- 5) 이탈 위험군 (최근 4개월 미접속) -->
    <update id="updateLeaverUsers">
        UPDATE user u
        LEFT JOIN (SELECT user_id, MAX(access_time) AS last_access
        FROM access_stats GROUP BY user_id) la
        ON la.user_id = u.user_id
        SET u.user_type = '이탈 위험군'
        WHERE u.user_type NOT IN ('탈퇴','휴면','복귀','신규')
        AND (
        la.last_access &lt; DATE_SUB(#{baseDate}, INTERVAL 4 MONTH)
        OR (la.last_access IS NULL
        AND u.join_date &lt; DATE_SUB(#{baseDate}, INTERVAL 4 MONTH))
        );
    </update>

    <!-- 6) 일반 (마지막 정리) -->
    <update id="updateGeneralUsers">
        UPDATE user
        SET user_type = '일반'
        WHERE user_type NOT IN ('탈퇴','휴면','복귀','신규','이탈 위험군');
    </update>

</mapper>